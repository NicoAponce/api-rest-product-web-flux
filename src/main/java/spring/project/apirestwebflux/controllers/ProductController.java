package spring.project.apirestwebflux.controllers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.http.codec.multipart.FilePart;import org.springframework.web.bind.annotation.*;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import spring.project.apirestwebflux.documents.Product;import spring.project.apirestwebflux.services.IProductService;import javax.validation.Valid;@RestController@RequestMapping("/products")public class ProductController {    @Autowired    private IProductService productService;    @GetMapping("/select")    public Mono<ResponseEntity<Flux<Product>>> select() {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.select()));    }    @GetMapping("/get/{id}")    public Mono<ResponseEntity<Mono<Product>>> get(@PathVariable String id) {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.get(id)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    @PostMapping("/insert")    public Mono<ResponseEntity<Mono<Product>>> insert(@Valid @RequestBody Mono<Product> monoProduct) {        return monoProduct.flatMap(product -> Mono.just(ResponseEntity.ok()                 .contentType(MediaType.APPLICATION_JSON)                 .body(productService.insert(product))));    }    @PostMapping("/upload/{id}")    public Mono<ResponseEntity<Mono<Product>>> upload(@PathVariable String id, @RequestPart FilePart filePart) {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.upload(id, filePart)))        .defaultIfEmpty(ResponseEntity.notFound().build());    }    @PutMapping("/update/{id}")    public Mono<ResponseEntity<Mono<Product>>> update(@RequestBody Product product, @PathVariable String id) {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.update(product, id)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    @DeleteMapping("/delete/{id}")    public Mono<ResponseEntity<Mono<Void>>> delete(@PathVariable String id) {        return Mono.just(ResponseEntity.ok()                .body(productService.delete(id)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }}