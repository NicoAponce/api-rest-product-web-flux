package spring.project.apirestwebflux.controllers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.http.codec.multipart.FilePart;import org.springframework.web.bind.annotation.*;import org.springframework.web.bind.support.WebExchangeBindException;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import spring.project.apirestwebflux.documents.Product;import spring.project.apirestwebflux.services.IProductService;import javax.validation.Valid;import java.util.Date;import java.util.HashMap;import java.util.Map;@RestController@RequestMapping("/products")public class ProductController {    @Autowired    private IProductService productService;    @GetMapping("/select")    public Mono<ResponseEntity<Flux<Product>>> select() {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.select()));    }    @GetMapping("/get/{id}")    public Mono<ResponseEntity<Mono<Product>>> get(@PathVariable String id) {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.get(id)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    @PostMapping("/insert")    public Mono<ResponseEntity<Map<String, Object>>> insert(@Valid @RequestBody Mono<Product> monoProduct) {        Map<String, Object> response = new HashMap<>();        return monoProduct.flatMap(product -> {            return productService.insert(product)                    .map(productOne -> {                        response.put("product", productOne);                        response.put("message", "product added successfully");                        response.put("date", new Date());                        return ResponseEntity.ok()                                .contentType(MediaType.APPLICATION_JSON)                                .body(response);                    });        }).onErrorResume(throwable -> {            return Mono.just(throwable)                    .cast(WebExchangeBindException.class)                    .flatMap(e -> Mono.just(e.getFieldErrors()))                    .flatMapMany(Flux::fromIterable)                    .map(fieldError -> " el campo " + fieldError.getField() + " " + fieldError.getDefaultMessage())                    .collectList()                    .flatMap(list -> {                        response.put("errors", list);                        response.put("date", new Date());                        response.put("status", HttpStatus.BAD_REQUEST.value());                        return Mono.just(ResponseEntity.badRequest().body(response));                    });        });    }    @PostMapping("/upload/{id}")    public Mono<ResponseEntity<Mono<Product>>> upload(@PathVariable String id, @RequestPart FilePart filePart) {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.upload(id, filePart)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    @PutMapping("/update/{id}")    public Mono<ResponseEntity<Mono<Product>>> update(@RequestBody Product product, @PathVariable String id) {        return Mono.just(ResponseEntity.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.update(product, id)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }    @DeleteMapping("/delete/{id}")    public Mono<ResponseEntity<Mono<Void>>> delete(@PathVariable String id) {        return Mono.just(ResponseEntity.ok()                .body(productService.delete(id)))                .defaultIfEmpty(ResponseEntity.notFound().build());    }}